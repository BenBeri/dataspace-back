{
  "info": {
    "name": "Dataspace API",
    "description": "Complete API collection for Dataspace Platform with Authentication, Users, Workspaces, and Repositories management. Features CASL-based permission system with workspace owner privileges, group-based permissions, and user-specific permission overrides. Includes advanced multi-credential system allowing different users/groups to have different database credentials with varying permission levels for the same repository. Data Engine operations automatically resolve user-specific credentials based on priority: user-specific > group-based > default access. Supports both regular collaborative workspaces and personal playground workspaces for experimentation.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "dataspace-api-collection",
    "version": "7.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "groupId",
      "value": "",
      "type": "string",
      "description": "UUID of a group for testing group endpoints"
    },
    {
      "key": "workspaceId",
      "value": "",
      "type": "string",
      "description": "UUID of a workspace for testing workspace-related endpoints"
    },
    {
      "key": "repositoryId",
      "value": "",
      "type": "string",
      "description": "UUID of a repository for testing repository endpoints"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string",
      "description": "UUID of a user for testing user-related endpoints"
    },
    {
      "key": "credentialsId",
      "value": "",
      "type": "string",
      "description": "UUID of repository credentials for testing credential endpoints"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Health",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the auth token from response",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.accessToken) {",
                  "        pm.collectionVariables.set('authToken', response.accessToken);",
                  "        console.log('Auth token saved:', response.accessToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Create User (Register)",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"password\": \"password123\",\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me"]
            }
          },
          "response": []
        },
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?offset=0&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Number of records to skip (default: 0)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of users to return (default: 10, max: 100)"
                },
                {
                  "key": "email",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by exact email match"
                },
                {
                  "key": "firstName",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by first name (partial match)"
                },
                {
                  "key": "lastName",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by last name (partial match)"
                },
                {
                  "key": "isActive",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by active status (true/false)"
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true,
                  "description": "Search across email, firstName, and lastName"
                },
                {
                  "key": "createdAfter",
                  "value": "",
                  "disabled": true,
                  "description": "Filter users created after this date (ISO format)"
                },
                {
                  "key": "createdBefore",
                  "value": "",
                  "disabled": true,
                  "description": "Filter users created before this date (ISO format)"
                },
                {
                  "key": "updatedAfter",
                  "value": "",
                  "disabled": true,
                  "description": "Filter users updated after this date (ISO format)"
                },
                {
                  "key": "updatedBefore",
                  "value": "",
                  "disabled": true,
                  "description": "Filter users updated before this date (ISO format)"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Users - With Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?offset=0&limit=5&isActive=true&search=john",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "offset",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "isActive",
                  "value": "true"
                },
                {
                  "key": "search",
                  "value": "john"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Check User Exists",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/1/exists",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1", "exists"]
            }
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"jane.smith@example.com\",\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Workspaces",
      "item": [
        {
          "name": "Create Workspace (With custom key)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the workspace ID from response",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('workspaceId', response.id);",
                  "        console.log('Workspace ID saved:', response.id);",
                  "        console.log('Custom name_key used:', response.name_key);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"My Development Workspace\",\n  \"name_key\": \"my-dev-workspace\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces"]
            },
            "description": "Creates a workspace with a custom name_key provided. The name_key must contain only lowercase letters, numbers, and single dashes (max 32 characters)."
          },
          "response": []
        },
        {
          "name": "Create Workspace (Auto-generated key)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the workspace ID from response",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('workspaceId', response.id);",
                  "        console.log('Workspace ID saved:', response.id);",
                  "        console.log('Auto-generated name_key:', response.name_key);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"API Gateway Project v2\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces"]
            },
            "description": "Creates a workspace without providing name_key - the system will auto-generate it from the name (e.g., 'API Gateway Project v2' -> 'api-gateway-project-v2')"
          },
          "response": []
        },
        {
          "name": "Create Workspace (Duplicate key - Error Test)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Duplicate Test\",\n  \"name_key\": \"my-dev-workspace\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces"]
            },
            "description": "Tests unique constraint validation - should return 400 error with validation-formatted message when trying to use an existing name_key. Run this after creating the first workspace to see the error response."
          },
          "response": []
        },
        {
          "name": "Get Workspaces by Owner",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces?ownerId=1",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces"],
              "query": [
                {
                  "key": "ownerId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Workspace by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/1",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Update Workspace",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Workspace Name\",\n  \"name_key\": \"updated-workspace\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/1",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1"]
            },
            "description": "Updates workspace properties. Both name and name_key are optional. If only name is provided, name_key remains unchanged."
          },
          "response": []
        },
        {
          "name": "Delete Workspace",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/1",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User Workspaces",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/my-workspaces",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "my-workspaces"]
            },
            "description": "Gets simplified workspace information for the current authenticated user (REGULAR workspaces only). Returns: workspaceId, nameKey, ownerUserId, group (name and permissions), createdAt, updatedAt."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/my-workspaces",
                  "host": ["{{baseUrl}}"],
                  "path": ["workspaces", "my-workspaces"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "[\n  {\n    \"workspaceId\": \"uuid\",\n    \"nameKey\": \"my-workspace\",\n    \"ownerUserId\": \"uuid\",\n    \"group\": {\n      \"name\": \"admin\",\n      \"permissions\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": true,\n        \"membersManagement\": {\n          \"read\": true,\n          \"write\": true,\n          \"delete\": true\n        },\n        \"repository\": {\n          \"public\": {\n            \"read\": true,\n            \"write\": true,\n            \"delete\": true\n          },\n          \"private\": {}\n        }\n      }\n    },\n    \"createdAt\": \"2024-01-01T00:00:00Z\",\n    \"updatedAt\": \"2024-01-01T00:00:00Z\"\n  }\n]"
            }
          ]
        },
        {
          "name": "Get Current User Playground Workspace",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/my-playground-workspace",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "my-playground-workspace"]
            },
            "description": "Gets the current user's playground workspace. Returns a single workspace object (not an array) or null if no playground workspace exists. Playground workspaces are personal workspaces for experimentation."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/my-playground-workspace",
                  "host": ["{{baseUrl}}"],
                  "path": ["workspaces", "my-playground-workspace"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"workspaceId\": \"uuid\",\n  \"nameKey\": \"my-playground\",\n  \"ownerUserId\": \"uuid\",\n  \"group\": {\n    \"name\": \"Owner\",\n    \"permissions\": {}\n  },\n  \"createdAt\": \"2024-01-01T00:00:00Z\",\n  \"updatedAt\": \"2024-01-01T00:00:00Z\",\n  \"logoUrl\": null\n}"
            },
            {
              "name": "No Playground Workspace",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/my-playground-workspace",
                  "host": ["{{baseUrl}}"],
                  "path": ["workspaces", "my-playground-workspace"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "null"
            }
          ]
        }
      ]
    },
    {
      "name": "Workspace Members",
      "item": [
        {
          "name": "Add Member to Workspace",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": 2,\n  \"groupName\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/1/members",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1", "members"]
            }
          },
          "response": []
        },
        {
          "name": "Get Workspace Members",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/1/members",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1", "members"]
            },
            "description": "Gets workspace members. Response now includes full workspace details (including name_key) when workspace relations are loaded."
          },
          "response": []
        },
        {
          "name": "Update Member Group",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"groupName\": \"viewer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/1/members/2/group",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1", "members", "2", "group"]
            }
          },
          "response": []
        },
        {
          "name": "Remove Member from Workspace",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/1/members/2",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1", "members", "2"]
            }
          },
          "response": []
        },
        {
          "name": "Get User Workspace Memberships",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/users/1/memberships",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "users", "1", "memberships"]
            },
            "description": "Gets all workspace memberships for a user. Response includes full workspace details (including name_key) for each membership when workspace relations are loaded."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Groups (Permission Management)",
      "item": [
        {
          "name": "Create Group",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"admin\",\n  \"permissions\": {\n    \"read\": true,\n    \"write\": true,\n    \"delete\": true,\n    \"membersManagement\": {\n      \"read\": true,\n      \"write\": true,\n      \"delete\": true\n    },\n    \"repository\": {\n      \"public\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": true\n      },\n      \"private\": {}\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups"]
            }
          },
          "response": []
        },
        {
          "name": "Create Viewer Group",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"viewer\",\n  \"permissions\": {\n    \"read\": true,\n    \"write\": false,\n    \"delete\": false,\n    \"membersManagement\": {\n      \"read\": true,\n      \"write\": false,\n      \"delete\": false\n    },\n    \"repository\": {\n      \"public\": {\n        \"read\": true,\n        \"write\": false,\n        \"delete\": false\n      },\n      \"private\": {}\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups"]
            }
          },
          "response": []
        },
        {
          "name": "Get All Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups"]
            }
          },
          "response": []
        },
        {
          "name": "Get Group by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups/{{groupId}}",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups", "{{groupId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Group",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"updated-admin\",\n  \"permissions\": {\n    \"read\": true,\n    \"write\": true,\n    \"delete\": false,\n    \"membersManagement\": {\n      \"read\": true,\n      \"write\": false,\n      \"delete\": false\n    },\n    \"repository\": {\n      \"public\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": false\n      },\n      \"private\": {\n        \"{{repositoryId}}\": {\n          \"read\": true,\n          \"write\": true,\n          \"delete\": false\n        }\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups/{{groupId}}",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups", "{{groupId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Group",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups/{{groupId}}",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups", "{{groupId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Repositories",
      "description": "CRUD operations for repositories with workspace-based permissions. Each repository has a database type and can have one connection configuration for accessing the database.",
      "item": [
        {
          "name": "Create Repository",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the repository ID from response",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('repositoryId', response.id);",
                  "        console.log('Repository ID saved:', response.id);",
                  "        console.log('Repository type:', response.type);",
                  "        console.log('Has connection:', response.hasConnection);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"My PostgreSQL Repository\",\n  \"description\": \"A PostgreSQL repository for database operations\",\n  \"type\": \"postgres\",\n  \"isPrivate\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "repositories"]
            },
            "description": "Creates a repository with a specified database type. Connection configuration can be set separately using the connection endpoints."
          },
          "response": []
        },
        {
          "name": "Create Private MongoDB Repository",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the repository ID from response",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('repositoryId', response.id);",
                  "        console.log('MongoDB Repository ID saved:', response.id);",
                  "        console.log('Repository is private:', response.isPrivate);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Document Storage\",\n  \"description\": \"MongoDB repository for document storage\",\n  \"type\": \"mongodb\",\n  \"isPrivate\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "repositories"]
            },
            "description": "Creates a private MongoDB repository. Connection configuration can be set after creation. Private repositories require explicit user access grants via the Permission Management endpoints."
          },
          "response": []
        },
        {
          "name": "Get Repositories by Workspace",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories?limit=10&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "repositories"],
              "query": [
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of repositories to return (default: 10, max: 100)"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Number of records to skip (default: 0)"
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true,
                  "description": "Search across repository name and description using SQL LIKE"
                }
              ]
            },
            "description": "Gets paginated list of repositories in a specific workspace. Response includes repository type and connection status. Private repositories are only shown if user has explicit access or is workspace owner/admin."
          },
          "response": []
        },
        {
          "name": "Get Repository by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}"
              ]
            },
            "description": "Gets a specific repository by ID. Response includes repository type, connection status, and workspace details."
          },
          "response": []
        },
        {
          "name": "Update Repository (Including Type)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Repository Name\",\n  \"description\": \"Updated description\",\n  \"type\": \"mysql\",\n  \"isPrivate\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}"
              ]
            },
            "description": "Updates a repository including its database type. Note: Changing the database type may affect the compatibility of existing connection configurations."
          },
          "response": []
        },
        {
          "name": "Delete Repository",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}"
              ]
            },
            "description": "Deletes a repository and all its associated data including connection configuration and connection history. The operation is cascaded."
          },
          "response": []
        },
        {
          "name": "Set Repository Connection Configuration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"connectionName\": \"Production Database\",\n  \"configuration\": {\n    \"host\": \"prod.db.example.com\",\n    \"port\": 5432,\n    \"database\": \"prod_database\",\n    \"username\": \"prod_user\",\n    \"password\": \"prod_password\",\n    \"ssl\": true,\n    \"connectionLimit\": 20\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/connection",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "connection"
              ]
            },
            "description": "Sets the connection configuration for a repository. Configuration is encrypted before storage and tracked in connection history."
          },
          "response": []
        },
        {
          "name": "Get Repository Connection Configuration",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/connection/configuration",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "connection",
                "configuration"
              ]
            },
            "description": "Gets the decrypted connection configuration for a repository. Returns null if no configuration is set."
          },
          "response": []
        },
        {
          "name": "Check Repository Connection Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/connection/status",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "connection",
                "status"
              ]
            },
            "description": "Checks whether the repository has a connection configuration set."
          },
          "response": []
        },
        {
          "name": "Update Repository Connection Configuration",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"connectionName\": \"Updated Production Database\",\n  \"configuration\": {\n    \"host\": \"new-prod.db.example.com\",\n    \"port\": 5432,\n    \"database\": \"new_prod_database\",\n    \"username\": \"new_prod_user\",\n    \"password\": \"new_prod_password\",\n    \"ssl\": true,\n    \"connectionLimit\": 25,\n    \"connectionTimeout\": 30000\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/connection",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "connection"
              ]
            },
            "description": "Updates the connection configuration for a repository. Both connectionName and configuration are optional. Changes are tracked in connection history."
          },
          "response": []
        },
        {
          "name": "Remove Repository Connection Configuration",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/connection",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "connection"
              ]
            },
            "description": "Removes the connection configuration from a repository. This action is tracked in connection history."
          },
          "response": []
        },
        {
          "name": "Get Repository Connection History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/connection/history?offset=0&limit=10",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "connection",
                "history"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Number of records to skip (default: 0)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of history records to return (default: 10, max: 100)"
                }
              ]
            },
            "description": "Gets paginated connection history for a repository. Shows all modifications made to the connection configuration with user attribution and timestamps."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Repository Credentials Management",
      "description": "Advanced multi-credential system for repositories. Each repository can have multiple credential sets (full-access, read-only, analytics, etc.) with granular access control for users and groups. Includes default fallback credentials and priority-based resolution: user-specific > group-based > default access.",
      "item": [
        {
          "name": "Create Repository Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"read-only\",\n  \"description\": \"Read-only access for data analysts\",\n  \"configuration\": {\n    \"host\": \"readonly.db.example.com\",\n    \"port\": 5432,\n    \"database\": \"analytics\",\n    \"username\": \"readonly_user\",\n    \"password\": \"readonly_pass\",\n    \"ssl\": true\n  },\n  \"isDefault\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials"
              ]
            },
            "description": "Create new credentials for a repository. Each credential set has a unique name (e.g., 'full-access', 'read-only'), description, and encrypted database configuration. Can be marked as default for fallback access."
          },
          "response": []
        },
        {
          "name": "Get Repository Credentials",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials"
              ]
            },
            "description": "Get all credential sets for a repository with their access information, including user/group access entries and default status."
          },
          "response": []
        },
        {
          "name": "Update Repository Credentials",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"updated-read-only\",\n  \"description\": \"Updated read-only access\",\n  \"configuration\": {\n    \"host\": \"new-readonly.db.example.com\",\n    \"port\": 5432,\n    \"database\": \"analytics\",\n    \"username\": \"new_readonly_user\",\n    \"password\": \"new_readonly_pass\",\n    \"ssl\": true\n  },\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials/{{credentialsId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials",
                "{{credentialsId}}"
              ]
            },
            "description": "Update existing credentials configuration, name, description, or active status. Configuration changes are encrypted before storage."
          },
          "response": []
        },
        {
          "name": "Set Credentials as Default",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials/{{credentialsId}}/set-default",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials",
                "{{credentialsId}}",
                "set-default"
              ]
            },
            "description": "Set specific credentials as the default for this repository. Removes default status from other credentials and makes this the fallback for users without specific access."
          },
          "response": []
        },
        {
          "name": "Delete Repository Credentials",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials/{{credentialsId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials",
                "{{credentialsId}}"
              ]
            },
            "description": "Delete credentials and all associated access entries. Cannot delete if it's the only default credentials set for the repository."
          },
          "response": []
        },
        {
          "name": "Grant User Access to Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"notes\": \"Granting analyst access to read-only credentials\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials/{{credentialsId}}/access/users",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials",
                "{{credentialsId}}",
                "access",
                "users"
              ]
            },
            "description": "Grant a specific user direct access to these credentials. User-specific access has the highest priority in credential resolution."
          },
          "response": []
        },
        {
          "name": "Grant Group Access to Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"groupId\": \"{{groupId}}\",\n  \"notes\": \"Granting analyst group access to read-only credentials\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials/{{credentialsId}}/access/groups",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials",
                "{{credentialsId}}",
                "access",
                "groups"
              ]
            },
            "description": "Grant a specific group access to these credentials. Group-based access applies to all members of the group and has medium priority in credential resolution."
          },
          "response": []
        },
        {
          "name": "Create Default Access for Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"notes\": \"Default access for all repository users\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials/{{credentialsId}}/access/default",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials",
                "{{credentialsId}}",
                "access",
                "default"
              ]
            },
            "description": "Create default access entry - makes credentials available to all repository users as fallback. Default access has the lowest priority in credential resolution."
          },
          "response": []
        },
        {
          "name": "Get Credentials Access List",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials/{{credentialsId}}/access",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials",
                "{{credentialsId}}",
                "access"
              ]
            },
            "description": "Get all access entries for specific credentials showing users, groups, and default access with grant details and timestamps."
          },
          "response": []
        },
        {
          "name": "Revoke User Access to Credentials",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials/{{credentialsId}}/access/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials",
                "{{credentialsId}}",
                "access",
                "users",
                "{{userId}}"
              ]
            },
            "description": "Revoke user access to specific credentials. User will fall back to group-based or default access if available."
          },
          "response": []
        },
        {
          "name": "Revoke Group Access to Credentials",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials/{{credentialsId}}/access/groups/{{groupId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials",
                "{{credentialsId}}",
                "access",
                "groups",
                "{{groupId}}"
              ]
            },
            "description": "Revoke group access to specific credentials. Group members will fall back to user-specific or default access if available."
          },
          "response": []
        },
        {
          "name": "Get Available Credentials for User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials/available",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "credentials",
                "available"
              ]
            },
            "description": "Get all credentials that the current user has access to for this repository, showing access type (user-specific, group-based, or default) and priority order for credential resolution."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/credentials/available",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "workspaces",
                    "{{workspaceId}}",
                    "repositories",
                    "{{repositoryId}}",
                    "credentials",
                    "available"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"repositoryId\": \"uuid\",\n  \"availableCredentials\": [\n    {\n      \"credentials\": {\n        \"id\": \"uuid\",\n        \"name\": \"full-access\",\n        \"description\": \"Full database access\",\n        \"isDefault\": true,\n        \"isActive\": true\n      },\n      \"accessType\": \"user\",\n      \"accessDetails\": {\n        \"identityId\": \"user-uuid\",\n        \"identityType\": \"user\",\n        \"grantedBy\": \"admin-uuid\",\n        \"notes\": \"Direct user access\"\n      }\n    },\n    {\n      \"credentials\": {\n        \"id\": \"uuid\",\n        \"name\": \"read-only\",\n        \"description\": \"Read-only access\",\n        \"isDefault\": false,\n        \"isActive\": true\n      },\n      \"accessType\": \"group\",\n      \"accessDetails\": {\n        \"identityId\": \"group-uuid\",\n        \"identityType\": \"group\",\n        \"grantedBy\": \"admin-uuid\",\n        \"notes\": \"Group-based access\"\n      }\n    }\n  ]\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Permission Management",
      "description": "Mission 1 & 2 Complete: Hierarchical permission system with user-specific overrides. Users inherit permissions from their group but can have specific overrides that use deep merge logic to customize access at granular levels.",
      "item": [
        {
          "name": "Grant Repository Permissions to User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"read\": true,\n  \"write\": true,\n  \"delete\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/permissions/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "permissions",
                "users",
                "{{userId}}"
              ]
            },
            "description": "Mission 1: Grant specific permissions to a user for a private repository. This creates user-specific permission overrides that are deep merged with their group permissions. Only works on private repositories."
          },
          "response": []
        },
        {
          "name": "Get All Users with Access to Repository",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/users-with-access",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "users-with-access"
              ]
            },
            "description": "Mission 2: Get all users who have access to this repository (public or private). Shows final merged permissions and access source (group, user-override, or both)."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/users-with-access",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "workspaces",
                    "{{workspaceId}}",
                    "repositories",
                    "{{repositoryId}}",
                    "users-with-access"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"repositoryId\": \"uuid\",\n  \"repositoryName\": \"My Private Repo\",\n  \"isPrivate\": true,\n  \"usersWithAccess\": [\n    {\n      \"userId\": \"uuid\",\n      \"username\": \"John Doe\",\n      \"email\": \"john.doe@example.com\",\n      \"groupName\": \"admin\",\n      \"accessSource\": \"group\",\n      \"permissions\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": true\n      }\n    },\n    {\n      \"userId\": \"uuid\",\n      \"username\": \"Jane Smith\",\n      \"email\": \"jane.smith@example.com\",\n      \"groupName\": \"viewer\",\n      \"accessSource\": \"user-override\",\n      \"permissions\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": false\n      }\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get User's Permissions in Workspace",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/users/{{userId}}/permissions",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "users",
                "{{userId}}",
                "permissions"
              ]
            },
            "description": "Get a user's complete final permissions in a workspace (group permissions + user overrides merged)."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/users/{{userId}}/permissions",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "workspaces",
                    "{{workspaceId}}",
                    "users",
                    "{{userId}}",
                    "permissions"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"userId\": \"uuid\",\n  \"workspaceId\": \"uuid\",\n  \"groupId\": \"uuid\",\n  \"groupName\": \"editor\",\n  \"hasOverrides\": true,\n  \"finalPermissions\": {\n    \"read\": true,\n    \"write\": true,\n    \"delete\": false,\n    \"membersManagement\": {\n      \"read\": true,\n      \"write\": false,\n      \"delete\": false\n    },\n    \"repository\": {\n      \"public\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": false\n      },\n      \"private\": {\n        \"repo-uuid-1\": {\n          \"read\": true,\n          \"write\": true,\n          \"delete\": false\n        }\n      }\n    }\n  }\n}"
            }
          ]
        },
        {
          "name": "Get My Permissions in Workspace",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/my-permissions",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "my-permissions"]
            },
            "description": "Get your own complete final permissions in a workspace (group permissions + user overrides merged)."
          },
          "response": []
        },
        {
          "name": "Revoke Repository Permissions from User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/permissions/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "permissions",
                "users",
                "{{userId}}"
              ]
            },
            "description": "Remove user-specific permission overrides for a repository. The user will fall back to their group permissions."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Data Engine",
      "description": "Database query execution and connection management endpoints. Includes 3 connection test methods: (1) Direct - test raw credentials without saving, (2) Encrypted - test encrypted credentials using workspace KMS, (3) Repository - test stored repository connections. Additional connection management: get connection status, get connection info, disconnect repository. Execute queries using user-specific credentials automatically resolved through the multi-credential system. Each user connects with different database permissions based on their credential access priority: user-specific grants > group membership > default credentials.",
      "item": [
        {
          "name": "Test Database Connection",
          "description": "Test database connection with credentials only - no workspace or repository context required",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"postgres\",\n  \"config\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"username\": \"dataspace_user\",\n    \"password\": \"dataspace_password123\",\n    \"database\": \"dataspace_db\",\n    \"ssl\": true\n  },\n  \"timeoutMs\": 10000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/data-engine/test-connection",
              "host": ["{{baseUrl}}"],
              "path": ["data-engine", "test-connection"]
            },
            "description": "Test database connection using provided credentials without requiring workspace or repository context."
          },
          "response": []
        },
        {
          "name": "Test Encrypted Connection",
          "description": "Test database connection using encrypted credentials from request body - requires workspace context for KMS key access",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"postgres\",\n  \"encryptedConfig\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"timeoutMs\": 10000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/data-engine/test-connection/encrypted/{{workspaceId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "data-engine",
                "test-connection",
                "encrypted",
                "{{workspaceId}}"
              ]
            },
            "description": "Test database connection using encrypted credentials from request body. Decrypts credentials using workspace KMS key and tests connection. Useful for testing credentials stored in client-side encrypted storage."
          },
          "response": []
        },
        {
          "name": "Test Repository Connection",
          "description": "Test database connection using repository's stored configuration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"timeoutMs\": 10000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/test-connection",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "test-connection"
              ]
            },
            "description": "Test database connection using the repository's credentials resolved for the current user. Uses the multi-credential system to automatically select the appropriate credentials based on user access priority."
          },
          "response": []
        },
        {
          "name": "Get Repository Connection Status",
          "description": "Get connection status for a repository - shows if connection is active and healthy",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/status",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "status"
              ]
            },
            "description": "Get the current connection status for a repository. Shows if the database connection is active, healthy, and when it was last connected."
          },
          "response": []
        },
        {
          "name": "Ping Repository Connection",
          "description": "Keep repository connection alive and check status - can be called periodically",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/connection/ping",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "connection",
                "ping"
              ]
            },
            "description": "Ping the database connection to keep it alive and check its health status. Returns connection status, response time, and timestamp. Perfect for periodic health checks and maintaining active connections."
          },
          "response": []
        },
        {
          "name": "Get Repository Connection Info",
          "description": "Get detailed connection information for a repository including credentials name and database type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/connection-info",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "connection-info"
              ]
            },
            "description": "Get detailed information about the repository's database connection including the credentials name being used, database type, status, and connection timestamp."
          },
          "response": []
        },
        {
          "name": "Execute Query on Repository",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"SELECT * FROM users WHERE id = ?\",\n  \"params\": [1],\n  \"timeout\": 30000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/execute",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "execute"
              ]
            },
            "description": "Execute a single query on a repository's database connection using user-specific credentials. The system automatically resolves the appropriate credentials for the current user. Supports parameterized queries and custom timeouts."
          },
          "response": []
        },
        {
          "name": "Execute Batch Queries on Repository",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"queries\": [\n    {\n      \"query\": \"SELECT COUNT(*) as user_count FROM users\",\n      \"params\": []\n    },\n    {\n      \"query\": \"SELECT * FROM users WHERE isActive = ?\",\n      \"params\": [true]\n    }\n  ],\n  \"timeout\": 60000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/batch",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "batch"
              ]
            },
            "description": "Execute multiple queries in batch on a repository's database connection using user-specific credentials. The system automatically resolves the appropriate credentials for the current user."
          },
          "response": []
        },
        {
          "name": "Get Repository Connection Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/status",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "status"
              ]
            },
            "description": "Get connection status for a repository's database connection using the current user's resolved credentials."
          },
          "response": []
        },
        {
          "name": "Disconnect Repository Connection",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/connection",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "connection"
              ]
            },
            "description": "Disconnect and clean up the repository's database connection from the connection pool for the current user's resolved credentials."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Data Engine Admin",
      "description": "Administrative endpoints for data engine connection pool management. Requires elevated permissions.",
      "item": [
        {
          "name": "Get Pool Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/data-engine/pool/statistics",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "data-engine", "pool", "statistics"]
            }
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/admin/data-engine/pool/statistics",
                  "host": ["{{baseUrl}}"],
                  "path": ["admin", "data-engine", "pool", "statistics"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"totalConnections\": 45,\n  \"activeConnections\": 12,\n  \"connectionsByType\": {\n    \"postgres\": 25,\n    \"mysql\": 15,\n    \"mongodb\": 5\n  },\n  \"connectionsByWorkspace\": {\n    \"workspace-uuid-1\": 20,\n    \"workspace-uuid-2\": 15,\n    \"workspace-uuid-3\": 10\n  },\n  \"timestamp\": \"2024-01-01T12:00:00Z\"\n}"
            }
          ],
          "description": "Get connection pool statistics (admin only). Returns detailed metrics about active connections, connection types, and workspace distribution. Requires workspace manage permissions."
        }
      ]
    },
    {
      "name": "Database Info",
      "item": [
        {
          "name": "Get Supported Databases (Basic)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/database-info/supported-databases",
              "host": ["{{baseUrl}}"],
              "path": ["database-info", "supported-databases"]
            },
            "description": "Get list of all supported database types with basic information (no configuration details)"
          },
          "response": []
        },
        {
          "name": "Get Supported Databases (With Config)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/database-info/supported-databases?includeConfig=true",
              "host": ["{{baseUrl}}"],
              "path": ["database-info", "supported-databases"],
              "query": [
                {
                  "key": "includeConfig",
                  "value": "true",
                  "description": "Include configuration field details for each database type"
                }
              ]
            },
            "description": "Get list of all supported database types with detailed configuration information including required/optional fields, defaults, and descriptions"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Playground",
      "description": "Playground workspace endpoints for database exploration and experimentation. Automatically creates personal playground workspace on user registration with simplified repository management and real-time schema discovery via Server-Sent Events (SSE).",
      "item": [
        {
          "name": "Create Playground Repository",
          "description": "Create a new repository in the user's playground workspace",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"My Database Connection\",\n  \"description\": \"Connection to my PostgreSQL database\",\n  \"type\": \"postgres\",\n  \"credentials\": {\n    \"name\": \"default-connection\",\n    \"description\": \"Default connection credentials\",\n    \"config\": {\n      \"host\": \"localhost\",\n      \"port\": 5432,\n      \"username\": \"dataspace_user\",\n      \"password\": \"dataspace_password123\",\n      \"database\": \"dataspace_db\",\n      \"ssl\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/playground/repositories",
              "host": ["{{baseUrl}}"],
              "path": ["playground", "repositories"]
            },
            "description": "Create a repository with credentials in the user's personal playground workspace. Repositories are automatically set as private. If credentials are provided, they will be encrypted and saved, and the repository will be marked as saved."
          },
          "response": []
        },
        {
          "name": "Save Playground Credentials",
          "description": "Save encrypted credentials for an existing playground repository that was created without credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"default-connection\",\n  \"description\": \"Default connection credentials\",\n  \"config\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"username\": \"dataspace_user\",\n    \"password\": \"dataspace_password123\",\n    \"database\": \"dataspace_db\",\n    \"ssl\": true\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/playground/repositories/{{repositoryId}}/credentials",
              "host": ["{{baseUrl}}"],
              "path": [
                "playground",
                "repositories",
                "{{repositoryId}}",
                "credentials"
              ]
            },
            "description": "Save encrypted database credentials for a playground repository. Credentials are encrypted using the playground workspace KMS key."
          },
          "response": []
        },
        {
          "name": "Connect & Discover Schema (SSE)",
          "description": "Real-time connection and schema discovery via Server-Sent Events",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "text/event-stream"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/playground/repositories/{{repositoryId}}/connect",
              "host": ["{{baseUrl}}"],
              "path": [
                "playground",
                "repositories",
                "{{repositoryId}}",
                "connect"
              ]
            },
            "description": "Stream real-time connection and schema discovery progress. Returns Server-Sent Events with steps: validating → connecting → connected → discovering_tables → tables_loaded → discovering_views → views_loaded → complete. Provides live feedback like DBeaver/DataGrip database explorers."
          },
          "response": []
        },
        {
          "name": "Ping Playground Connection",
          "description": "Keep playground connection alive and check status - can be called periodically",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/playground/repositories/{{repositoryId}}/ping",
              "host": ["{{baseUrl}}"],
              "path": ["playground", "repositories", "{{repositoryId}}", "ping"]
            },
            "description": "Ping the database connection to keep it alive and check its health status. Returns connection status, response time, and timestamp. Perfect for periodic health checks."
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Log current auth token",
          "console.log('Current auth token:', pm.collectionVariables.get('authToken'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Check for authentication errors",
          "if (pm.response.code === 401) {",
          "    console.log('Authentication required - please login first');",
          "}"
        ]
      }
    }
  ]
}
