{
  "info": {
    "name": "Dataspace API",
    "description": "Complete API collection for Dataspace Platform with Authentication, Users, Workspaces, Repositories and Data Sources management. Now featuring CASL-based permission system with workspace owner privileges, group-based permissions, and user-specific permission overrides. Mission 1 & 2 complete: Hierarchical permission system with deep merge logic for user-specific overrides.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "dataspace-api-collection",
    "version": "5.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "groupId",
      "value": "",
      "type": "string",
      "description": "UUID of a group for testing group endpoints"
    },
    {
      "key": "workspaceId",
      "value": "",
      "type": "string",
      "description": "UUID of a workspace for testing workspace-related endpoints"
    },
    {
      "key": "repositoryId",
      "value": "",
      "type": "string",
      "description": "UUID of a repository for testing repository endpoints"
    },
    {
      "key": "dataSourceId",
      "value": "",
      "type": "string",
      "description": "UUID of a data source for testing data source endpoints"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string",
      "description": "UUID of a user for testing user-related endpoints"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Health",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the auth token from response",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.accessToken) {",
                  "        pm.collectionVariables.set('authToken', response.accessToken);",
                  "        console.log('Auth token saved:', response.accessToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Create User (Register)",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"password\": \"password123\",\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me"]
            }
          },
          "response": []
        },
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?offset=0&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Number of records to skip (default: 0)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of users to return (default: 10, max: 100)"
                },
                {
                  "key": "email",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by exact email match"
                },
                {
                  "key": "firstName",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by first name (partial match)"
                },
                {
                  "key": "lastName",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by last name (partial match)"
                },
                {
                  "key": "isActive",
                  "value": "",
                  "disabled": true,
                  "description": "Filter by active status (true/false)"
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true,
                  "description": "Search across email, firstName, and lastName"
                },
                {
                  "key": "createdAfter",
                  "value": "",
                  "disabled": true,
                  "description": "Filter users created after this date (ISO format)"
                },
                {
                  "key": "createdBefore",
                  "value": "",
                  "disabled": true,
                  "description": "Filter users created before this date (ISO format)"
                },
                {
                  "key": "updatedAfter",
                  "value": "",
                  "disabled": true,
                  "description": "Filter users updated after this date (ISO format)"
                },
                {
                  "key": "updatedBefore",
                  "value": "",
                  "disabled": true,
                  "description": "Filter users updated before this date (ISO format)"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Users - With Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?offset=0&limit=5&isActive=true&search=john",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "offset",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "isActive",
                  "value": "true"
                },
                {
                  "key": "search",
                  "value": "john"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Check User Exists",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/1/exists",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1", "exists"]
            }
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"jane.smith@example.com\",\n  \"isActive\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Workspaces",
      "item": [
        {
          "name": "Create Workspace (With custom key)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the workspace ID from response",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('workspaceId', response.id);",
                  "        console.log('Workspace ID saved:', response.id);",
                  "        console.log('Custom name_key used:', response.name_key);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"My Development Workspace\",\n  \"name_key\": \"my-dev-workspace\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces"]
            },
            "description": "Creates a workspace with a custom name_key provided. The name_key must contain only lowercase letters, numbers, and single dashes (max 32 characters)."
          },
          "response": []
        },
        {
          "name": "Create Workspace (Auto-generated key)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the workspace ID from response",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('workspaceId', response.id);",
                  "        console.log('Workspace ID saved:', response.id);",
                  "        console.log('Auto-generated name_key:', response.name_key);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"API Gateway Project v2\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces"]
            },
            "description": "Creates a workspace without providing name_key - the system will auto-generate it from the name (e.g., 'API Gateway Project v2' -> 'api-gateway-project-v2')"
          },
          "response": []
        },
        {
          "name": "Create Workspace (Duplicate key - Error Test)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Duplicate Test\",\n  \"name_key\": \"my-dev-workspace\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces"]
            },
            "description": "Tests unique constraint validation - should return 400 error with validation-formatted message when trying to use an existing name_key. Run this after creating the first workspace to see the error response."
          },
          "response": []
        },
        {
          "name": "Get Workspaces by Owner",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces?ownerId=1",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces"],
              "query": [
                {
                  "key": "ownerId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Workspace by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/1",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Update Workspace",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Workspace Name\",\n  \"name_key\": \"updated-workspace\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/1",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1"]
            },
            "description": "Updates workspace properties. Both name and name_key are optional. If only name is provided, name_key remains unchanged."
          },
          "response": []
        },
        {
          "name": "Delete Workspace",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/1",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1"]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User Workspaces",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/my-workspaces",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "my-workspaces"]
            },
            "description": "Gets simplified workspace information for the current authenticated user. Returns: workspaceId, nameKey, ownerUserId, group (name and permissions), createdAt, updatedAt."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/my-workspaces",
                  "host": ["{{baseUrl}}"],
                  "path": ["workspaces", "my-workspaces"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "[\n  {\n    \"workspaceId\": \"uuid\",\n    \"nameKey\": \"my-workspace\",\n    \"ownerUserId\": \"uuid\",\n    \"group\": {\n      \"name\": \"admin\",\n      \"permissions\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": true,\n        \"membersManagement\": {\n          \"read\": true,\n          \"write\": true,\n          \"delete\": true\n        },\n        \"repository\": {\n          \"public\": {\n            \"read\": true,\n            \"write\": true,\n            \"delete\": true\n          },\n          \"private\": {}\n        }\n      }\n    },\n    \"createdAt\": \"2024-01-01T00:00:00Z\",\n    \"updatedAt\": \"2024-01-01T00:00:00Z\"\n  }\n]"
            }
          ]
        }
      ]
    },
    {
      "name": "Workspace Members",
      "item": [
        {
          "name": "Add Member to Workspace",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": 2,\n  \"groupName\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/1/members",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1", "members"]
            }
          },
          "response": []
        },
        {
          "name": "Get Workspace Members",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/1/members",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1", "members"]
            },
            "description": "Gets workspace members. Response now includes full workspace details (including name_key) when workspace relations are loaded."
          },
          "response": []
        },
        {
          "name": "Update Member Group",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"groupName\": \"viewer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/1/members/2/group",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1", "members", "2", "group"]
            }
          },
          "response": []
        },
        {
          "name": "Remove Member from Workspace",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/1/members/2",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "1", "members", "2"]
            }
          },
          "response": []
        },
        {
          "name": "Get User Workspace Memberships",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/users/1/memberships",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "users", "1", "memberships"]
            },
            "description": "Gets all workspace memberships for a user. Response includes full workspace details (including name_key) for each membership when workspace relations are loaded."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Groups (Permission Management)",
      "item": [
        {
          "name": "Create Group",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"admin\",\n  \"permissions\": {\n    \"read\": true,\n    \"write\": true,\n    \"delete\": true,\n    \"membersManagement\": {\n      \"read\": true,\n      \"write\": true,\n      \"delete\": true\n    },\n    \"repository\": {\n      \"public\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": true\n      },\n      \"private\": {}\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups"]
            }
          },
          "response": []
        },
        {
          "name": "Create Viewer Group",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"viewer\",\n  \"permissions\": {\n    \"read\": true,\n    \"write\": false,\n    \"delete\": false,\n    \"membersManagement\": {\n      \"read\": true,\n      \"write\": false,\n      \"delete\": false\n    },\n    \"repository\": {\n      \"public\": {\n        \"read\": true,\n        \"write\": false,\n        \"delete\": false\n      },\n      \"private\": {}\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups"]
            }
          },
          "response": []
        },
        {
          "name": "Get All Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups"]
            }
          },
          "response": []
        },
        {
          "name": "Get Group by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups/{{groupId}}",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups", "{{groupId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Group",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"updated-admin\",\n  \"permissions\": {\n    \"read\": true,\n    \"write\": true,\n    \"delete\": false,\n    \"membersManagement\": {\n      \"read\": true,\n      \"write\": false,\n      \"delete\": false\n    },\n    \"repository\": {\n      \"public\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": false\n      },\n      \"private\": {\n        \"{{repositoryId}}\": {\n          \"read\": true,\n          \"write\": true,\n          \"delete\": false\n        }\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups/{{groupId}}",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups", "{{groupId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Group",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/groups/{{groupId}}",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "groups", "{{groupId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Repositories",
      "description": "CRUD operations for repositories with workspace-based permissions. Repositories now have database types at the repository level, and can contain multiple data sources.",
      "item": [
        {
          "name": "Create Repository (No Data Sources)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the repository ID from response",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('repositoryId', response.id);",
                  "        console.log('Repository ID saved:', response.id);",
                  "        console.log('Repository type:', response.type);",
                  "        console.log('Data sources:', response.dataSources ? response.dataSources.length : 0);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"My PostgreSQL Repository\",\n  \"repositoryNameKey\": \"my-postgres-repo\",\n  \"description\": \"A PostgreSQL repository without initial data sources\",\n  \"type\": \"postgres\",\n  \"isPrivate\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "repositories"]
            },
            "description": "Creates a repository without initial data sources. The repository has a database type (POSTGRESQL, MYSQL, MONGODB, etc.) and data sources can be added later. The repositoryNameKey must contain only lowercase letters, numbers, and single dashes (max 32 characters)."
          },
          "response": []
        },
        {
          "name": "Create Repository with Multiple Data Sources",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the repository ID from response",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('repositoryId', response.id);",
                  "        console.log('Repository ID saved:', response.id);",
                  "        console.log('Repository type:', response.type);",
                  "        if (response.dataSources && response.dataSources.length > 0) {",
                  "            pm.collectionVariables.set('dataSourceId', response.dataSources[0].id);",
                  "            console.log('First Data Source ID saved:', response.dataSources[0].id);",
                  "            console.log('Total data sources created:', response.dataSources.length);",
                  "        }",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Multi-Environment PostgreSQL\",\n  \"repositoryNameKey\": \"multi-env-postgres\",\n  \"description\": \"PostgreSQL repository with multiple environment data sources\",\n  \"type\": \"postgres\",\n  \"isPrivate\": false,\n  \"dataSources\": [\n    {\n      \"name\": \"Development Database\",\n      \"configuration\": {\n        \"host\": \"localhost\",\n        \"port\": 5432,\n        \"database\": \"dev_database\",\n        \"username\": \"dev_user\",\n        \"password\": \"dev_password\",\n        \"ssl\": false\n      }\n    },\n    {\n      \"name\": \"Staging Database\",\n      \"configuration\": {\n        \"host\": \"staging.db.example.com\",\n        \"port\": 5432,\n        \"database\": \"staging_database\",\n        \"username\": \"staging_user\",\n        \"password\": \"staging_password\",\n        \"ssl\": true\n      }\n    },\n    {\n      \"name\": \"Production Database\",\n      \"configuration\": {\n        \"host\": \"prod.db.example.com\",\n        \"port\": 5432,\n        \"database\": \"prod_database\",\n        \"username\": \"prod_user\",\n        \"password\": \"prod_password\",\n        \"ssl\": true,\n        \"connectionLimit\": 20\n      }\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "repositories"]
            },
            "description": "Creates a repository with multiple data sources. All data sources belong to the same database type (specified at repository level). This example creates a PostgreSQL repository with development, staging, and production data sources."
          },
          "response": []
        },
        {
          "name": "Create MongoDB Repository",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the repository ID from response",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('repositoryId', response.id);",
                  "        console.log('MongoDB Repository ID saved:', response.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Document Storage\",\n  \"description\": \"MongoDB repository for document storage\",\n  \"type\": \"mongodb\",\n  \"isPrivate\": true,\n  \"dataSources\": [\n    {\n      \"name\": \"Primary Cluster\",\n      \"configuration\": {\n        \"connectionString\": \"mongodb://localhost:27017/documents\",\n        \"authDatabase\": \"admin\",\n        \"username\": \"mongo_user\",\n        \"password\": \"mongo_password\"\n      }\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "repositories"]
            },
            "description": "Creates a MongoDB repository (private) with a single data source. Repository type is set to MONGODB and all data sources inherit this type. Note: Private repositories use the new whitelist system - users must be explicitly granted access via the Private Repository Access endpoints."
          },
          "response": []
        },
        {
          "name": "Get Repositories by Workspace",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories?limit=10&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "repositories"],
              "query": [
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of repositories to return (default: 10, max: 100)"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Number of records to skip (default: 0)"
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true,
                  "description": "Search across repository name and description using SQL LIKE"
                }
              ]
            },
            "description": "Gets paginated list of repositories in a specific workspace. Response includes repository type and array of data sources. Private repositories are only shown if user has explicit access or is workspace owner/admin."
          },
          "response": []
        },
        {
          "name": "Get Repository by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}"
              ]
            },
            "description": "Gets a specific repository by ID. Response includes repository type, all data sources, and workspace details."
          },
          "response": []
        },
        {
          "name": "Update Repository (Including Type)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Repository Name\",\n  \"description\": \"Updated description\",\n  \"type\": \"mysql\",\n  \"isPrivate\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}"
              ]
            },
            "description": "Updates a repository including its database type. Note: Changing the database type affects all data sources in the repository - ensure compatibility."
          },
          "response": []
        },
        {
          "name": "Delete Repository",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}"
              ]
            },
            "description": "Deletes a repository and all its associated data sources. The operation is cascaded - deleting the repository also removes all data sources and their change history."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Permission Management",
      "description": "Mission 1 & 2 Complete: Hierarchical permission system with user-specific overrides. Users inherit permissions from their group but can have specific overrides that use deep merge logic to customize access at granular levels.",
      "item": [
        {
          "name": "Grant Repository Permissions to User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"read\": true,\n  \"write\": true,\n  \"delete\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/permissions/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "permissions",
                "users",
                "{{userId}}"
              ]
            },
            "description": "Mission 1: Grant specific permissions to a user for a private repository. This creates user-specific permission overrides that are deep merged with their group permissions. Only works on private repositories."
          },
          "response": []
        },
        {
          "name": "Get All Users with Access to Repository",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/users-with-access",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "users-with-access"
              ]
            },
            "description": "Mission 2: Get all users who have access to this repository (public or private). Shows final merged permissions and access source (group, user-override, or both)."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/users-with-access",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "workspaces",
                    "{{workspaceId}}",
                    "repositories",
                    "{{repositoryId}}",
                    "users-with-access"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"repositoryId\": \"uuid\",\n  \"repositoryName\": \"My Private Repo\",\n  \"isPrivate\": true,\n  \"usersWithAccess\": [\n    {\n      \"userId\": \"uuid\",\n      \"username\": \"John Doe\",\n      \"email\": \"john.doe@example.com\",\n      \"groupName\": \"admin\",\n      \"accessSource\": \"group\",\n      \"permissions\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": true\n      }\n    },\n    {\n      \"userId\": \"uuid\",\n      \"username\": \"Jane Smith\",\n      \"email\": \"jane.smith@example.com\",\n      \"groupName\": \"viewer\",\n      \"accessSource\": \"user-override\",\n      \"permissions\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": false\n      }\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get User's Permissions in Workspace",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/users/{{userId}}/permissions",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "users",
                "{{userId}}",
                "permissions"
              ]
            },
            "description": "Get a user's complete final permissions in a workspace (group permissions + user overrides merged)."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/users/{{userId}}/permissions",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "workspaces",
                    "{{workspaceId}}",
                    "users",
                    "{{userId}}",
                    "permissions"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"userId\": \"uuid\",\n  \"workspaceId\": \"uuid\",\n  \"groupId\": \"uuid\",\n  \"groupName\": \"editor\",\n  \"hasOverrides\": true,\n  \"finalPermissions\": {\n    \"read\": true,\n    \"write\": true,\n    \"delete\": false,\n    \"membersManagement\": {\n      \"read\": true,\n      \"write\": false,\n      \"delete\": false\n    },\n    \"repository\": {\n      \"public\": {\n        \"read\": true,\n        \"write\": true,\n        \"delete\": false\n      },\n      \"private\": {\n        \"repo-uuid-1\": {\n          \"read\": true,\n          \"write\": true,\n          \"delete\": false\n        }\n      }\n    }\n  }\n}"
            }
          ]
        },
        {
          "name": "Get My Permissions in Workspace",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/my-permissions",
              "host": ["{{baseUrl}}"],
              "path": ["workspaces", "{{workspaceId}}", "my-permissions"]
            },
            "description": "Get your own complete final permissions in a workspace (group permissions + user overrides merged)."
          },
          "response": []
        },
        {
          "name": "Revoke Repository Permissions from User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/permissions/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "permissions",
                "users",
                "{{userId}}"
              ]
            },
            "description": "Remove user-specific permission overrides for a repository. The user will fall back to their group permissions."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Data Sources",
      "description": "Data source management endpoints. Data sources inherit the database type from their parent repository and can be managed independently.",
      "item": [
        {
          "name": "Create Data Source",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Extract and save the data source ID from response",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.id) {",
                  "        pm.collectionVariables.set('dataSourceId', response.id);",
                  "        console.log('Data Source ID saved:', response.id);",
                  "        console.log('Data Source name:', response.name);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Testing Environment\",\n  \"configuration\": {\n    \"host\": \"test.db.example.com\",\n    \"port\": 5432,\n    \"database\": \"test_database\",\n    \"username\": \"test_user\",\n    \"password\": \"test_password\",\n    \"ssl\": true,\n    \"connectionTimeout\": 30\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources"
              ]
            },
            "description": "Creates a new data source within a repository. The data source inherits the database type from the repository (no type field needed). Configuration is encrypted before storage."
          },
          "response": []
        },
        {
          "name": "Get All Data Sources for Repository",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources"
              ]
            },
            "description": "Gets all data sources associated with a repository. Response includes name, repositoryId, and timestamps but not configuration (use specific endpoint for configuration)."
          },
          "response": []
        },
        {
          "name": "Get Data Source by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources",
                "{{dataSourceId}}"
              ]
            },
            "description": "Gets a specific data source by ID. Returns basic information without configuration. Use the configuration endpoint to get decrypted configuration."
          },
          "response": []
        },
        {
          "name": "Get Data Source Configuration",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/configuration",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources",
                "{{dataSourceId}}",
                "configuration"
              ]
            },
            "description": "Gets the decrypted configuration for a specific data source. This endpoint returns both the data source metadata and the decrypted configuration object."
          },
          "response": []
        },
        {
          "name": "Update Data Source",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Testing Environment\",\n  \"configuration\": {\n    \"host\": \"updated-test.db.example.com\",\n    \"port\": 5432,\n    \"database\": \"updated_test_database\",\n    \"username\": \"updated_test_user\",\n    \"password\": \"updated_test_password\",\n    \"ssl\": true,\n    \"connectionTimeout\": 60,\n    \"maxConnections\": 15\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources",
                "{{dataSourceId}}"
              ]
            },
            "description": "Updates a data source. Both name and configuration are optional. Changes are tracked in the change history with user attribution. Configuration is encrypted before storage."
          },
          "response": []
        },
        {
          "name": "Delete Data Source",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources",
                "{{dataSourceId}}"
              ]
            },
            "description": "Deletes a data source and all its associated change history. This removes the data source from the repository but doesn't affect other data sources."
          },
          "response": []
        },
        {
          "name": "Get Data Source Change History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/history?offset=0&limit=10",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources",
                "{{dataSourceId}}",
                "history"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "0",
                  "description": "Number of records to skip (default: 0)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of history records to return (default: 10, max: 100)"
                }
              ]
            },
            "description": "Gets paginated change history for a data source. Shows all modifications made to the data source including name and configuration changes with user attribution and timestamps."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Data Engine",
      "description": "Multi-database query execution endpoints. Execute queries, batch operations, and manage connections for various database types (PostgreSQL, MySQL, MongoDB, etc.).",
      "item": [
        {
          "name": "Test Database Connection",
          "description": "Test database connection with credentials only - no workspace or repository context required",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"postgres\",\n  \"config\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"username\": \"postgres\",\n    \"password\": \"password\",\n    \"database\": \"testdb\",\n    \"ssl\": false\n  },\n  \"timeoutMs\": 10000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/data-engine/test-connection",
              "host": ["{{baseUrl}}"],
              "path": ["data-engine", "test-connection"]
            }
          },
          "response": [
            {
              "name": "Success Response - PostgreSQL",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"postgres\",\n  \"config\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"username\": \"postgres\",\n    \"password\": \"password\",\n    \"database\": \"testdb\",\n    \"ssl\": false\n  },\n  \"timeoutMs\": 10000\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/data-engine/test-connection",
                  "host": ["{{baseUrl}}"],
                  "path": ["data-engine", "test-connection"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"type\": \"postgres\",\n  \"message\": \"Connection test successful\",\n  \"responseTime\": 234,\n  \"serverInfo\": {\n    \"version\": \"PostgreSQL 16.1 on x86_64-pc-linux-gnu\",\n    \"serverName\": \"PostgreSQL\"\n  }\n}"
            },
            {
              "name": "Failed Response - Connection Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"type\": \"postgres\",\n  \"config\": {\n    \"host\": \"invalid-host\",\n    \"port\": 5432,\n    \"username\": \"postgres\",\n    \"password\": \"password\",\n    \"database\": \"testdb\",\n    \"ssl\": false\n  },\n  \"timeoutMs\": 10000\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/data-engine/test-connection",
                  "host": ["{{baseUrl}}"],
                  "path": ["data-engine", "test-connection"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"type\": \"postgres\",\n  \"message\": \"Connection test failed\",\n  \"responseTime\": 5000,\n  \"error\": \"connect ENOTFOUND invalid-host\"\n}"
            }
          ]
        },
        {
          "name": "Execute Query",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"SELECT * FROM users WHERE id = ?\",\n  \"params\": [1],\n  \"timeout\": 30000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/execute",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources",
                "{{dataSourceId}}",
                "execute"
              ]
            }
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"query\": \"SELECT * FROM users LIMIT 5\",\n  \"params\": []\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/execute",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "workspaces",
                    "{{workspaceId}}",
                    "repositories",
                    "{{repositoryId}}",
                    "data-sources",
                    "{{dataSourceId}}",
                    "execute"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"email\": \"user@example.com\",\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\"\n    }\n  ],\n  \"rowCount\": 1,\n  \"executionTime\": 25,\n  \"type\": \"postgres\"\n}"
            }
          ],
          "description": "Execute a single query on a data source. Supports parameterized queries and custom timeouts. The query format depends on the database type (SQL for PostgreSQL/MySQL, MongoDB query objects, etc.)."
        },
        {
          "name": "Execute Batch Queries",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"queries\": [\n    {\n      \"query\": \"SELECT COUNT(*) as user_count FROM users\",\n      \"params\": []\n    },\n    {\n      \"query\": \"SELECT * FROM users WHERE isActive = ?\",\n      \"params\": [true]\n    },\n    {\n      \"query\": \"INSERT INTO audit_logs (action, userId) VALUES (?, ?)\",\n      \"params\": [\"batch_query\", 1]\n    }\n  ],\n  \"timeout\": 60000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/batch",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources",
                "{{dataSourceId}}",
                "batch"
              ]
            }
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"queries\": [\n    {\n      \"query\": \"SELECT COUNT(*) as user_count FROM users\",\n      \"params\": []\n    },\n    {\n      \"query\": \"SELECT * FROM users WHERE isActive = ?\",\n      \"params\": [true]\n    }\n  ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/batch",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "workspaces",
                    "{{workspaceId}}",
                    "repositories",
                    "{{repositoryId}}",
                    "data-sources",
                    "{{dataSourceId}}",
                    "batch"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"results\": [\n    {\n      \"success\": true,\n      \"data\": [{\"user_count\": 150}],\n      \"rowCount\": 1\n    },\n    {\n      \"success\": true,\n      \"data\": [{\"id\": 1, \"email\": \"user@example.com\"}],\n      \"rowCount\": 1\n    }\n  ],\n  \"totalExecutionTime\": 45,\n  \"type\": \"postgres\",\n  \"queryCount\": 2\n}"
            }
          ],
          "description": "Execute multiple queries in batch on a data source. Useful for running related queries together with better performance than individual requests."
        },
        {
          "name": "Execute Transaction (Reserved)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"operations\": [\n    {\n      \"type\": \"query\",\n      \"query\": \"INSERT INTO users (email, firstName) VALUES (?, ?)\",\n      \"params\": [\"newuser@example.com\", \"New\"]\n    },\n    {\n      \"type\": \"query\",\n      \"query\": \"UPDATE user_stats SET total_users = total_users + 1\",\n      \"params\": []\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/transaction",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources",
                "{{dataSourceId}}",
                "transaction"
              ]
            }
          },
          "description": "Execute operations within a database transaction. Currently returns an error indicating the endpoint is reserved for future implementation. Requires specific transaction operation implementation."
        },
        {
          "name": "Get Connection Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/status",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources",
                "{{dataSourceId}}",
                "status"
              ]
            }
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/status",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "workspaces",
                    "{{workspaceId}}",
                    "repositories",
                    "{{repositoryId}}",
                    "data-sources",
                    "{{dataSourceId}}",
                    "status"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"workspaceId\": \"uuid\",\n  \"repositoryId\": \"uuid\",\n  \"dataSourceId\": \"uuid\",\n  \"type\": \"postgres\",\n  \"status\": \"healthy\",\n  \"connectedAt\": \"2024-01-01T12:00:00Z\",\n  \"responseTime\": 15\n}"
            }
          ],
          "description": "Get connection status for a specific data source. Returns health status, connection details, and response time metrics."
        },
        {
          "name": "Get Repository Data Sources",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources"
              ]
            }
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "workspaces",
                    "{{workspaceId}}",
                    "repositories",
                    "{{repositoryId}}",
                    "data-sources"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"workspaceId\": \"uuid\",\n  \"repositoryId\": \"uuid\",\n  \"dataSources\": [\n    {\n      \"dataSourceId\": \"uuid\",\n      \"name\": \"Development Database\",\n      \"type\": \"postgres\",\n      \"status\": \"healthy\",\n      \"connectedAt\": \"2024-01-01T12:00:00Z\"\n    },\n    {\n      \"dataSourceId\": \"uuid\",\n      \"name\": \"Staging Database\",\n      \"type\": \"postgres\",\n      \"status\": \"healthy\",\n      \"connectedAt\": \"2024-01-01T12:05:00Z\"\n    }\n  ]\n}"
            }
          ],
          "description": "Get all data sources for a repository with their connection status. Shows overview of all data sources and their health status."
        },
        {
          "name": "Disconnect Data Source",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/connection",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources",
                "{{dataSourceId}}",
                "connection"
              ]
            }
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/connection",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "workspaces",
                    "{{workspaceId}}",
                    "repositories",
                    "{{repositoryId}}",
                    "data-sources",
                    "{{dataSourceId}}",
                    "connection"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Data source connection disconnected successfully\"\n}"
            }
          ],
          "description": "Disconnect a specific data source connection. Useful for manually managing connection pools or closing connections."
        },
        {
          "name": "Get Native Client Info (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/native-client",
              "host": ["{{baseUrl}}"],
              "path": [
                "workspaces",
                "{{workspaceId}}",
                "repositories",
                "{{repositoryId}}",
                "data-sources",
                "{{dataSourceId}}",
                "native-client"
              ]
            }
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/workspaces/{{workspaceId}}/repositories/{{repositoryId}}/data-sources/{{dataSourceId}}/native-client",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "workspaces",
                    "{{workspaceId}}",
                    "repositories",
                    "{{repositoryId}}",
                    "data-sources",
                    "{{dataSourceId}}",
                    "native-client"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"type\": \"postgres\",\n  \"warning\": \"Direct client access bypasses connection pool management. Use with extreme caution.\",\n  \"hasClient\": true\n}"
            }
          ],
          "description": "Get native database client information (admin endpoint). Returns client type and availability but not the actual client object for security reasons. Requires manage permissions on the repository."
        }
      ]
    },
    {
      "name": "Data Engine Admin",
      "description": "Administrative endpoints for data engine connection pool management. Requires elevated permissions.",
      "item": [
        {
          "name": "Get Pool Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/data-engine/pool/statistics",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "data-engine", "pool", "statistics"]
            }
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/admin/data-engine/pool/statistics",
                  "host": ["{{baseUrl}}"],
                  "path": ["admin", "data-engine", "pool", "statistics"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"totalConnections\": 45,\n  \"activeConnections\": 12,\n  \"connectionsByType\": {\n    \"postgres\": 25,\n    \"mysql\": 15,\n    \"mongodb\": 5\n  },\n  \"connectionsByWorkspace\": {\n    \"workspace-uuid-1\": 20,\n    \"workspace-uuid-2\": 15,\n    \"workspace-uuid-3\": 10\n  },\n  \"timestamp\": \"2024-01-01T12:00:00Z\"\n}"
            }
          ],
          "description": "Get connection pool statistics (admin only). Returns detailed metrics about active connections, connection types, and workspace distribution. Requires workspace manage permissions."
        }
      ]
    },
    {
      "name": "Database Info",
      "item": [
        {
          "name": "Get Supported Databases (Basic)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/database-info/supported-databases",
              "host": ["{{baseUrl}}"],
              "path": ["database-info", "supported-databases"]
            },
            "description": "Get list of all supported database types with basic information (no configuration details)"
          },
          "response": []
        },
        {
          "name": "Get Supported Databases (With Config)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/database-info/supported-databases?includeConfig=true",
              "host": ["{{baseUrl}}"],
              "path": ["database-info", "supported-databases"],
              "query": [
                {
                  "key": "includeConfig",
                  "value": "true",
                  "description": "Include configuration field details for each database type"
                }
              ]
            },
            "description": "Get list of all supported database types with detailed configuration information including required/optional fields, defaults, and descriptions"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Log current auth token",
          "console.log('Current auth token:', pm.collectionVariables.get('authToken'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Check for authentication errors",
          "if (pm.response.code === 401) {",
          "    console.log('Authentication required - please login first');",
          "}"
        ]
      }
    }
  ]
}
